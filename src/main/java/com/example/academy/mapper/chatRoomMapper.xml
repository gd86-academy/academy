<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.academy.mapper.chatRoomMapper">

<!-- 채팅방 추가
	useGeneratedKeys="true" : 자동 생성된 room_id를 chatRoom 객체의 roomId에 자동 매핑.
 -->
	<insert id="addChatRoom"
		parameterType="com.example.academy.vo.chatRoom" useGeneratedKeys="true"
		keyProperty="roomId">
		INSERT INTO chatroom (room_name, room_member_id, create_date, user_count)
		SELECT #{roomName}, e.employee_no, NOW(), 0
		FROM employee e 
		WHERE e.employee_no = #{roomMemberId}
	</insert>

<!-- 방 생성자 추가 
	채팅방이 생성되면 해당 방의 최초 생성자 정보를 roomemeber 테이블에 추가
-->
	<insert id="addRoomMember"
		parameterType="com.example.academy.vo.chatRoom">
		INSERT INTO roommember (room_id, employee_no,
		create_date)
		VALUES (#{roomId}, #{roomMemberId}, NOW());
		<!-- 새로생성된 채팅방 ID가 사용됨/ 방 생정자의 고유ID / 가입 시간 기록 -->
	</insert>
	
	<!-- 추가 멤버 삽입 
		새로운 사용자(employeeNo)가 채팅방에 참여할 때 호출
	-->
	<insert id="addUserToRoom">
	INSERT INTO roommember (room_id, employee_no, create_date)
	SELECT #{roomId}, e.employee_no, NOW()
	FROM employee e
	WHERE e.employee_no = #{employeeNo}
	AND e.employee_name = #{employeeName};
</insert>
	


	<!-- 채팅방 목록 조회 
	채팅방을 생성일자 기준으로 내림차순 정렬한다-->
	<select id="findAllRooms"
		resultType="com.example.academy.vo.chatRoom">
		SELECT
		room_id roomId,
		room_name roomName,
		room_member_id roomMemberId,
		create_date createDate,
		user_count userCount
		FROM chatroom ORDER BY create_date DESC;
	</select>

	<!-- room_id로 채팅방 조회 -->
	<select id="findRoomById" parameterType="string"
		resultType="com.example.academy.vo.chatRoom">
		SELECT
		room_id AS roomId,
		room_name AS roomName,
		room_member_id AS roomMemberId,
		create_date AS createDate,
		user_count AS userCount
		FROM chatroom
		WHERE room_id = #{roomId}
	</select>

<!-- chatroom, roommember 테이블에서 동시에 삭제 수행 -->
	<delete id="deleteRoom" parameterType="string">
		DELETE chatroom, roommember
		FROM chatroom
		LEFT JOIN roommember ON chatroom.room_id = roommember.room_id
		WHERE chatroom.room_id = #{roomId};
	</delete>

	<update id="chatModifyRoom">
		UPDATE chatroom SET room_name = #{roomName} WHERE room_id = #{roomId}
	</update>

	<!-- 채팅방 유저 수 증가 -->
	<update id="plusUserCnt" parameterType="string">
		UPDATE chatroom SET user_count = user_count + 1 WHERE room_id = #{roomId}
	</update>

	<!-- 채팅방 유저 수 감소 -->
	<update id="minusUserCnt" parameterType="string">
		UPDATE chatroom SET user_count = user_count - 1 WHERE room_id = #{roomId}
	</update>

	<!-- 채팅방 멤버 목록 조회 
		특정 room_id의 모든 employee_no(사용자ID)를 가져오는 역할을 수행
	-->
	<select id="getRoomMembers" parameterType="string"
		resultType="string">
		SELECT employee_no FROM roommember WHERE room_id = #{roomId}
	</select>

<!-- 특정 채팅방(room_id)에 속한 사용자와 사원 정보를 매칭
	일치하는 레코드가 있으면 직원 이름 (employee_name)을 반환
 -->
	<select id="getUserNameByEmployeeNo" resultType="string">
		SELECT e.employee_name
		FROM roommember rm
		JOIN employee e ON rm.employee_no = e.employee_no
		WHERE rm.room_id = #{roomId} AND rm.employee_no = #{employeeNo}
	</select>

	<!-- 해당 직원의 이름이 있으면 1 이상의 값이 반환됨. -->
	<select id="isValidEmployeeName" resultType="int">
		SELECT COUNT(*) FROM employee WHERE employee_name = #{employeeName}
	</select>

	<select id="isUserInRoom" resultType="int">
		SELECT COUNT(*) FROM roommember
		WHERE room_id = #{roomId} AND employee_no = (SELECT employee_no FROM
		employee WHERE employee_name = #{userName})
	</select>

<!-- employee테이블에서 특정 직원의 employee_no를 조회 -->
	<select id="getEmployeeNoByName" parameterType="string"
		resultType="int">
		SELECT employee_no FROM employee WHERE employee_name = #{employeeName}
	</select>

	<select id="isUserInRoom2" resultType="int">
		SELECT COUNT(*) FROM roommember
		WHERE room_id = #{roomId} AND employee_no = #{employeeNo}
	</select>

	<!-- chatmessage 테이블에 새로운 메시지 삽입 -->
	<insert id="insertChatMessage">
		INSERT INTO chatmessage (room_id, employee_no, content, create_date)
		VALUES (#{roomId}, #{employeeNo}, #{content}, NOW())
	</insert>

<!-- chatmessage 테이블에서 채팅 메시지를 조회 -->
	<select id="getChatHistory"
		resultType="com.example.academy.vo.chatMessage">
		SELECT m.content, e.employee_no, m.create_date
		FROM chatmessage m
		JOIN employee e ON m.employee_no = e.employee_no
		WHERE m.room_id = #{roomId}
		ORDER BY m.create_date ASC
	</select>

<!-- roommember 테이블에서 특정 사용자를 삭제한다. -->
	<delete id="removeUserFromRoom">
		DELETE FROM roommember
		WHERE room_id = #{roomId} AND employee_no = #{employeeNo}
	</delete>



</mapper>
